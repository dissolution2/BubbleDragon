package com.mygdx.game.framework.world;

import com.badlogic.gdx.physics.box2d.Contact;
import com.badlogic.gdx.physics.box2d.ContactImpulse;
import com.badlogic.gdx.physics.box2d.ContactListener;
import com.badlogic.gdx.physics.box2d.Fixture;
import com.badlogic.gdx.physics.box2d.Manifold;


//import com.mygdx.game.objects.Portal;
//import com.mygdx.game.sprites.BubblePlayer;
import com.mygdx.game.framework.sprites.enemies.EnemyA;
import com.mygdx.game.framework.sprites.enemies.EnemyKnightDevil;
import com.mygdx.game.framework.sprites.BubblePlayer;
import com.mygdx.game.framework.util.GameUtility;
//import com.mygdx.game.sprites.powers.BalloneBullet;

public class WorldContactListener implements ContactListener{

    @Override
    public void beginContact(Contact contact) {
        Fixture fixA = contact.getFixtureA();
        Fixture fixB = contact.getFixtureB();



        int cDef = fixA.getFilterData().categoryBits | fixB.getFilterData().categoryBits;
//System.out.println("is ContactListener even called ? : " + cDef);
        switch (cDef){

/*            case GameUtility.BALLONE_HEAD_BIT | GameUtility.PLAYER_BIT: // contact 1
                //case Utility.PLAYER_POWER_BIT | Utility.PLAYER_BIT: // contact 2
//System.out.println("BALLON_HEAD_BIT | MARIO_BIT : " + Utility.BALLONE_HEAD_BIT + " : " + Utility.PLAYER_BIT );
                if(fixA.getFilterData().categoryBits == GameUtility.BALLONE_HEAD_BIT) {
                    //((BalloneBullet)fixA.getUserData()).hitOnHead((BubblePlayer) fixB.getUserData()); // ok

//System.out.println("Contact 1"); // BALLONE_HEAD_BIT | PLAYER_BIT
                }else{
                    //((BalloneBullet)fixB.getUserData()).hitOnHead((BubblePlayer) fixA.getUserData()); // ok
//System.out.println("Contact 2"); // PLAYER_POWER_BIT | PALAYER_BIT - RIGHT AFTER SHOOTING!!
                }
                break;
*/
            // usage ON Balloon !!!
            case GameUtility.PLAYER_BIT | GameUtility.GROUND_BIT: // if player is on Ground or off it /falling to death
                if(fixA.getFilterData().categoryBits == GameUtility.GROUND_BIT)
                    //((InteractiveTileObject) fixB.getUserData()).onHeadHit((BubblePlayer) fixA.getUserData());
                    BubblePlayer.playerOnGround(); // Static boolean ok !!
//System.out.println("Contact player and ground!!");
                break;

            case GameUtility.ENEMY_A_BIT | GameUtility.PLAYER_POWER_BIT:
                if(fixA.getFilterData().categoryBits == GameUtility.PLAYER_POWER_BIT) {
                    //((BalloneBullet)fixA.getUserData()).hitWithBullet((EnemyA) fixB.getUserData()); // setToDestroy balloon
                }else{
                    //((BalloneBullet)fixB.getUserData()).hitWithBullet((EnemyA) fixA.getUserData());
                }
                if(fixA.getFilterData().categoryBits == GameUtility.ENEMY_A_BIT) {
                    //((EnemyA)fixA.getUserData()).hitWithBullet((BalloneBullet) fixB.getUserData()); // SetToDestroy EnemyA & Set new Animation
                }else{
                    //((EnemyA)fixB.getUserData()).hitWithBullet((BalloneBullet) fixA.getUserData());
                }
                break;

            case GameUtility.ENEMY_A_BIT | GameUtility.OBJECT_BIT:

                if(fixA.getFilterData().categoryBits == GameUtility.ENEMY_A_BIT) {
                    //System.out.println("fixA : " + fixA.getUserData() );// .getFilterData().categoryBits);

                    if(fixA.getUserData().equals( (EnemyA)fixA.getUserData() )) {
                        //System.out.println("true enemyA");
                        ((EnemyA)fixA.getUserData()).reverseVelocity(true, false);
                    }

                }else{
                    System.out.println("fixB : " + fixB.getUserData() );
                    if(fixB.getUserData().equals( (EnemyA)fixB.getUserData() )) {
                        //System.out.println("true enemyA");
                        ((EnemyA)fixB.getUserData()).reverseVelocity(true, false);
                    }

                }
                break;
//AI Marker collision
            case GameUtility.ENEMY_ENEMYKNIGHTDEVIL_BIT | GameUtility.OBJECT_BIT:
            //case  GameUtility.OBJECT_BIT | GameUtility.ENEMY_ENEMYKNIGHTDEVIL_BIT:
//System.out.println("World List fixB: EnemyKnightDevil collide with OBJECT - AI Marker - ");
//System.out.println("World Contact List fixA : " + fixA.getUserData() );
//System.out.println("World Contact List fixB : " + fixB.getUserData() );
/*

MarkerStartMove - MarkerLeftEnd - MarkerRightEnd | Patrolling Enemy Markers testing!!

if( ((GameMarker)fixB.getUserData()).getMarkerID().equals("MarkStartMove") ) {
     ((EnemyKnightDevil)fixB.getUserData()).objectTargetSeek();
}
 */
            // OBJECT_BIT TEST = GameMarker casting
            // ENEMY_ENEMYKNIGHTDEVIL_BIT = EnemyKnightDevil casting
            if(fixA.getFilterData().categoryBits == GameUtility.OBJECT_BIT) {

//System.out.println("World Contact List fixA : " + fixA.getFilterData().categoryBits );
//System.out.println("World Contact List fixB : " + fixB.getUserData() );

                if (((GameMarker) fixA.getUserData()).getMarkerID().equals("MARKER_AI_LEFT")) {
System.out.println("World Contact List Enemy/Object fixA : " + fixA.getFilterData().categoryBits + " MARKER_AI_LEFT");
                }


/*

                    if (((GameMarker) fixA.getUserData()).getMarkerID().equals("MarkStartMove")) {

                        ((EnemyKnightDevil) fixB.getUserData()).setPatroll_Marker_Start_True();
                    }

                    if (((GameMarker) fixA.getUserData()).getMarkerID().equals("MarkerEndLeft")) {

                        ((EnemyKnightDevil) fixB.getUserData()).setPatroll_Marker_Left_True();

//System.out.println("WorldContact Listener test : Marker left = true hit");
                        ((EnemyKnightDevil)fixB.getUserData()).reverseVelocity(true, false);

                    }

                    if (((GameMarker) fixA.getUserData()).getMarkerID().equals("MarkerEndRight")) {

                        ((EnemyKnightDevil) fixB.getUserData()).setPatroll_Marker_Right_True();
//System.out.println("WorldContact Listener test : Marker right = true hit");
                        ((EnemyKnightDevil)fixB.getUserData()).reverseVelocity(true, false);
                    }
*/
            }
            break;

            case GameUtility.ENEMY_CLOSE_RANGE_ATTACK_BIT | GameUtility.PLAYER_BIT:
                //System.out.println(" test !! ");
                if(fixA.getFilterData().categoryBits == GameUtility.ENEMY_CLOSE_RANGE_ATTACK_BIT) {
                    //System.out.println("fixA : " + fixA.getUserData() );// .getFilterData().categoryBits);

                    if(fixA.getUserData().equals( (EnemyKnightDevil)fixA.getUserData() )) {
//System.out.println("true Knight fixA - Start fight close range");



                        //((EnemyKnightDevil)fixA.getUserData()).reverseVelocity(true, false);
                        ((EnemyKnightDevil)fixA.getUserData()).closeAttack((EnemyKnightDevil) fixA.getUserData());
                    }

                }else{
                    //System.out.println("fixB : " + fixB.getUserData() );
                    if(fixB.getUserData().equals( (EnemyKnightDevil)fixB.getUserData() )) {
//System.out.println("true Knight fixB - Start fight close range");
                        //((EnemyKnightDevil)fixB.getUserData()).reverseVelocity(true, false);
//                        ((EnemyKnightDevil)fixB.getUserData()).closeAttack((EnemyKnightDevil) fixB.getUserData());
                    }

                }
                break;
            case GameUtility.PLAYER_BIT | GameUtility.OBJECT_BIT:


                if(fixA.getFilterData().categoryBits == GameUtility.OBJECT_BIT) {
                    if (((GameMarker) fixA.getUserData()).getMarkerID().equals("MARKER_SAVE_POINT")) {
                        System.out.println("World Contact List Enemy/Object fixA : " + fixA.getFilterData().categoryBits + " MARKER_SAVE_POINT");
                    }
}
            break;

/*
            case GameUtility.PLAYER_HEAD_BIT | GameUtility.PLAYER_POWER_BIT:
                if(fixA.getFilterData().categoryBits == GameUtility.PLAYER_POWER_BIT) {
                    //((BalloneBullet)fixA.getUserData()).headWithBullet((BubblePlayer) fixB.getUserData());
                }else{
                    //((BalloneBullet)fixB.getUserData()).headWithBullet((BubblePlayer) fixA.getUserData());
                }
                break;
*/
                case GameUtility.ENEMY_ENEMYKNIGHTDEVIL_BIT | GameUtility.GROUND_BIT:
                if(fixA.getFilterData().categoryBits == GameUtility.GROUND_BIT)
                    //((InteractiveTileObject) fixB.getUserData()).onHeadHit((BubblePlayer) fixA.getUserData());
                    //BubblePlayer.playerLeftGround();
                    ((EnemyKnightDevil)fixB.getUserData()).enemyOnGround();
                    //System.out.println("smallEnemyDef is on ground");
 //System.out.println("Contact player and ground!!");
                break;

/*			// this works in EnemyA	 We got NullpointerEx Under we fixed it with a null != check !!
	        case Utility.PLAYER_BIT | Utility.ENEMY_BIT:
	        	if(fixA.getFilterData().categoryBits == Utility.ENEMY_BIT) { //  .PLAYER_BIT) { // Contact 1   .ENEMY_BIT) { // Contact 2
					//System.out.println("Contact 1");
					((EnemyA)fixA.getUserData()).contactWithEnemy((BubblePlayer) fixB.getUserData()); // no we don't wont contact handler in EnemyA for player!!

	        	}else{
					//System.out.println("Contact 2");
					((EnemyA)fixB.getUserData()).contactWithEnemy((BubblePlayer) fixA.getUserData()); // no we don't wont contact handler in EnemyA for player!!
	        	}
	        break;
*/
/*
	        case Utility.PLAYER_BIT | Utility.ENEMY_BIT:
                if(fixA.getFilterData().categoryBits == Utility.PLAYER_BIT) {

                	//Don't know why we get hit and after a NullpointerEx so to fix this we check!
                	if(((BubblePlayer) fixA.getUserData()) != null) {
                		((BubblePlayer) fixA.getUserData()).contactWithEnemy((Enemy)fixB.getUserData());
                	}
                }else{

                	//Don't know why we get hit and after a NullpointerEx so to fix this we check!
                	if(((BubblePlayer) fixB.getUserData()) != null) {
                		((BubblePlayer) fixB.getUserData()).contactWithEnemy((Enemy)fixA.getUserData());
                	}
                }
                break;
	        case Utility.PLAYER_BIT | Utility.PORTAL_START:
                if(fixA.getFilterData().categoryBits == Utility.PLAYER_BIT) {
                	System.out.println("Player hit Portal");
                	//Don't know why we get hit and after a NullpointerEx so to fix this we check!
                	if(((BubblePlayer) fixA.getUserData()) != null) {
                		((BubblePlayer) fixA.getUserData()).contactPortalTransfer((Portal)fixB.getUserData());
                	}
                }else{
                	//System.out.println("Player hit Portal");
                	//Don't know why we get hit and after a NullpointerEx so to fix this we check!
                	if(((BubblePlayer) fixB.getUserData()) != null) {
                		((BubblePlayer) fixB.getUserData()).contactPortalTransfer((Portal)fixA.getUserData());
                	}
                }
                break;

	        case Utility.PLAYER_BIT | Utility.PORTAL_MAPTRANSFER:
                if(fixA.getFilterData().categoryBits == Utility.PLAYER_BIT) {
                	System.out.println("Player hit Portal");
                	//Don't know why we get hit and after a NullpointerEx so to fix this we check!
                	if(((BubblePlayer) fixA.getUserData()) != null) {
                		((BubblePlayer) fixA.getUserData()).contactMapTransferPortal((Portal)fixB.getUserData());
                	}
                }else{
                	//System.out.println("Player hit Portal");
                	//Don't know why we get hit and after a NullpointerEx so to fix this we check!
                	if(((BubblePlayer) fixB.getUserData()) != null) {
                		((BubblePlayer) fixB.getUserData()).contactMapTransferPortal((Portal)fixA.getUserData());
                	}
                }
                break;
	        case Utility.PLAYER_BIT | Utility.PORTAL_BOSS:
                if(fixA.getFilterData().categoryBits == Utility.PLAYER_BIT) {
                	System.out.println("Player hit Portal");
                	//Don't know why we get hit and after a NullpointerEx so to fix this we check!
                	if(((BubblePlayer) fixA.getUserData()) != null) {
                		((BubblePlayer) fixA.getUserData()).contactBossMapTransferPortal((Portal)fixB.getUserData());
                	}
                }else{
                	//System.out.println("Player hit Portal");
                	//Don't know why we get hit and after a NullpointerEx so to fix this we check!
                	if(((BubblePlayer) fixB.getUserData()) != null) {
                		((BubblePlayer) fixB.getUserData()).contactBossMapTransferPortal((Portal)fixA.getUserData());
                	}
                }
                break;
*/
        }


    }

    @Override
    public void endContact(Contact contact) {
        Fixture fixA = contact.getFixtureA();
        Fixture fixB = contact.getFixtureB();

        int cDef = fixA.getFilterData().categoryBits | fixB.getFilterData().categoryBits;

        switch (cDef) {

            case GameUtility.ENEMY_CLOSE_RANGE_ATTACK_BIT | GameUtility.PLAYER_BIT:
                //System.out.println(" test !! ");
                if(fixA.getFilterData().categoryBits == GameUtility.ENEMY_CLOSE_RANGE_ATTACK_BIT) {
                    //System.out.println("fixA : " + fixA.getUserData() );// .getFilterData().categoryBits);

                    if(fixA.getUserData().equals( (EnemyKnightDevil)fixA.getUserData() )) {
                        System.out.println("true Knight fixA - left fight close range");



                        //((EnemyKnightDevil)fixA.getUserData()).reverseVelocity(true, false);
//                        ((EnemyKnightDevil)fixA.getUserData()).closeAttack((EnemyKnightDevil) fixA.getUserData());
                    }

                }else{
                    //System.out.println("fixB : " + fixB.getUserData() );
                    if(fixB.getUserData().equals( (EnemyKnightDevil)fixB.getUserData() )) {
                        System.out.println("true Knight fixB - left fight close range");
                        //((EnemyKnightDevil)fixB.getUserData()).reverseVelocity(true, false);
//                       ((EnemyKnightDevil)fixB.getUserData()).closeAttack((EnemyKnightDevil) fixB.getUserData());
                    }

                }
                break;

            case GameUtility.ENEMY_ENEMYKNIGHTDEVIL_BIT | GameUtility.OBJECT_BIT:


                // OBJECT_BIT TEST = GameMarker casting
                // ENEMY_ENEMYKNIGHTDEVIL_BIT = EnemyKnightDevil casting
                if(fixA.getFilterData().categoryBits == GameUtility.OBJECT_BIT) {
/*
                    if( ((GameMarker)fixA.getUserData()).getMarkerID().equals("MarkStartMove") ) {

                        //((EnemyKnightDevil)fixB.getUserData()).setPatroll_Marker_Start_False();
                    }

                    if( ((GameMarker)fixA.getUserData()).getMarkerID().equals("MarkStartLeft") ) {

                        //((EnemyKnightDevil)fixB.getUserData()).setPatroll_Marker_Left_False();
                    }

                    if( ((GameMarker)fixA.getUserData()).getMarkerID().equals("MarkStartRight") ) {

                        //((EnemyKnightDevil)fixB.getUserData()).setPatroll_Marker_Right_False();
                    }
*/
                }
/*
            case GameUtility.BALLONE_HEAD_BIT | GameUtility.PLAYER_BIT: // contact 1
                //case Utility.PLAYER_POWER_BIT | Utility.PLAYER_BIT: // contact 2
                //System.out.println("BALLON_HEAD_BIT | MARIO_BIT : " + Utility.BALLONE_HEAD_BIT + " : " + Utility.PLAYER_BIT );
                if (fixA.getFilterData().categoryBits == GameUtility.BALLONE_HEAD_BIT) {
                    //((BalloneBullet)fixA.getUserData()).endhitOnHead((BubblePlayer) fixB.getUserData());
                    //System.out.println("End Contact 1"); // BALLONE_HEAD_BIT | PLAYER_BIT
                } else {
                    //    ((BalloneBullet)fixB.getUserData()).hitOnHead((BubblePlayer) fixA.getUserData());
                    //System.out.println("End Contact 2"); // PLAYER_POWER_BIT | PALAYER_BIT - RIGHT AFTER SHOOTING!!
                }
                break;
*/
            case GameUtility.PLAYER_BIT | GameUtility.GROUND_BIT:
                if (fixA.getFilterData().categoryBits == GameUtility.GROUND_BIT)
                    //((InteractiveTileObject) fixB.getUserData()).onHeadHit((BubblePlayer) fixA.getUserData());
                    BubblePlayer.playerLeftGround();


                //System.out.println("Contact player and ground!!");
                break;
            case GameUtility.ENEMY_ENEMYKNIGHTDEVIL_BIT | GameUtility.GROUND_BIT:
                if (fixA.getFilterData().categoryBits == GameUtility.GROUND_BIT)
                    //((InteractiveTileObject) fixB.getUserData()).onHeadHit((BubblePlayer) fixA.getUserData());
                    //BubblePlayer.playerLeftGround();
                    ((EnemyKnightDevil) fixB.getUserData()).enemyLeftGround();
                    //System.out.println("smallEnemyDef is not on ground");

                //System.out.println("Contact player and ground!!");
                break;

        }


    }

    @Override
    public void preSolve(Contact contact, Manifold oldManifold) {
        // TODO Auto-generated method stub

    }

    @Override
    public void postSolve(Contact contact, ContactImpulse impulse) {
        // TODO Auto-generated method stub

    }


}

/*
                if (((GameMarker) fixA.getUserData()).getMarkerID().equals("MARKER_SAVE_POINT")) {
System.out.println("World Contact List Enemy/Object fixA getMarkerID().equals Test: " + fixA.getUserData() ); //+ " " + fixB.getUserData()  );
                }

                if(fixA.getFilterData().categoryBits == GameUtility.OBJECT_BIT) {
System.out.println("World Contact List Enemy/Object fixA GameUtility.GAME_MARKER Test: " + fixA.getUserData() ); //+ " " + fixB.getUserData()  );
                }
*/
//System.out.println("World Contact List Enemy/Object fixA : " + ((GameMarker) fixA.getUserData()).getMarkerID() );
//System.out.println("World Contact List Enemy/Object fixB : " + ((GameMarker) fixB.getUserData()).getMarkerID() );


                //if(fixB.getFilterData().categoryBits == GameUtility.PLAYER_BIT ) { //.GAME_MARKER) {

                    //((BubblePlayer)fixB.getUserData()).setSaveGame();

                    //if (((GameMarker) fixA.getUserData()).getMarkerID().equals("MARKER_SAVE_POINT")) {
//System.out.println("World Contact List Enemy/Object fixA : " + fixA.getFilterData().categoryBits + " MARKER_SAVE_POINT");
//System.out.println("World Contact List Enemy/Object fixA : " + ((GameMarker) fixA.getUserData()).getMarkerID() );
                    //}
               //


/*
            case GameUtility.ENEMY_BIT | GameUtility.GAME_MARKER_BIT:

                if(fixA.getFilterData().categoryBits == GameUtility.ENEMY_BIT) {
                    if(fixA.getUserData().equals( (EnemyA)fixA.getUserData() )) {
                        ((EnemyA)fixA.getUserData()).reverseVelocity(true, false);
                    }
                }else{
                    System.out.println("fixB : " + fixB.getUserData() );
                    if(fixB.getUserData().equals( (EnemyA)fixB.getUserData() )) {
                        ((EnemyA)fixB.getUserData()).reverseVelocity(true, false);
                    }
                }
            break;
*/